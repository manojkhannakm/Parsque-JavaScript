{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// import * as Promise from \"bluebird\";\r\nimport * as fs from \"fs\";\r\n\r\nimport {Content, Input, Output, Parser} from \"parsque-api\";\r\n\r\nconst FILES_PATH = \"./files/\";\r\nconst FILE_1_PATH = FILES_PATH + \"file_1.txt\";\r\nconst FILE_2_PATH = FILES_PATH + \"file_2.txt\";\r\nconst FILE_3_PATH = FILES_PATH + \"file_3.txt\";\r\n\r\nclass FileInput extends Input {\r\n    path: string;\r\n\r\n    file: FileInput;\r\n    files: FileInput[];\r\n}\r\n\r\nclass FileOutput extends Output {\r\n    number: number;\r\n    string: string;\r\n\r\n    file: FileOutput;\r\n    files: FileOutput[];\r\n}\r\n\r\nclass FileContent extends Content {\r\n    lines: string[];\r\n}\r\n\r\nclass FileParser extends Parser<FileInput, FileOutput, FileContent> {\r\n    public constructor(private path?: string) {\r\n        super();\r\n    }\r\n\r\n    protected createInput(): Promise<FileInput> {\r\n        return new Promise<FileInput>(resolve => {\r\n            let input: FileInput = new FileInput();\r\n\r\n            if (this.path) {\r\n                input.path = this.path;\r\n            }\r\n\r\n            resolve(input);\r\n        });\r\n    }\r\n\r\n    protected inputCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            let input: FileInput = this.input;\r\n\r\n            let childInput: FileInput = new FileInput();\r\n            childInput.path = FILE_2_PATH;\r\n            input.file = childInput;\r\n\r\n            let childInputs: FileInput[] = [];\r\n\r\n            for (let path of [FILE_1_PATH, FILE_2_PATH, FILE_3_PATH]) {\r\n                let childInput: FileInput = new FileInput();\r\n                childInput.path = path;\r\n                childInputs.push(childInput);\r\n            }\r\n\r\n            input.files = childInputs;\r\n\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createOutput(): Promise<FileOutput> {\r\n        return new Promise<FileOutput>(resolve => {\r\n            resolve(new FileOutput());\r\n        });\r\n    }\r\n\r\n    protected createContent(): Promise<FileContent> {\r\n        return new Promise<FileContent>((resolve, reject) => {\r\n            fs.readFile(this.input.path, \"utf-8\", (err, data) => {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                let content: FileContent = new FileContent();\r\n                content.lines = data.split(/\\s+/);\r\n\r\n                resolve(content);\r\n            });\r\n        });\r\n    }\r\n\r\n    public parseNumber(): Promise<FileParser> {\r\n        return this.parseValue(\"number\", parser => new Promise<any>(resolve => {\r\n            resolve(parseInt(this.content.lines[0]));\r\n        }));\r\n    }\r\n\r\n    public parseString(): Promise<FileParser> {\r\n        return this.parseValue(\"string\", parser => new Promise<any>(resolve => {\r\n            resolve(this.content.lines[1]);\r\n        }));\r\n    }\r\n}\r\n\r\nnew FileParser(FILE_1_PATH).create()\r\n    .then(parser => parser.parseNumber())\r\n    .then(parser => parser.parseString())\r\n    .then(parser => {\r\n        console.log(parser.output);\r\n    })\r\n    .catch(error => {\r\n        console.log(error);\r\n    });\r\n"]}