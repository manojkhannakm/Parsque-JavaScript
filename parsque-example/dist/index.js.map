{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {Content, Input, Output, Parser} from \"parsque\";\r\nimport * as Promise from \"bluebird\";\r\nimport * as fs from \"fs\";\r\n\r\nconst FILES_PATH = \"files/\";\r\nconst FILE_1_PATH = FILES_PATH + \"file_1.txt\";\r\nconst FILE_2_PATH = FILES_PATH + \"file_2.txt\";\r\nconst FILE_3_PATH = FILES_PATH + \"file_3.txt\";\r\n\r\nclass FileInput extends Input {\r\n    public path: string;\r\n    public file: FileInput;\r\n    public files: FileInput[];\r\n}\r\n\r\nclass FileOutput extends Output {\r\n    public word: string;\r\n    public words: string[];\r\n    public file: FileOutput;\r\n    public files: FileOutput[];\r\n}\r\n\r\nclass FileContent extends Content {\r\n    public lines: string[];\r\n}\r\n\r\nclass FileParser extends Parser<FileInput, FileOutput, FileContent> {\r\n    protected inputCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            let input: FileInput = this.input;\r\n\r\n            let childInput: FileInput = new FileInput();\r\n            childInput.path = FILE_2_PATH;\r\n\r\n            input.file = childInput;\r\n\r\n            let childInputs: FileInput[] = [];\r\n\r\n            for (let path of [FILE_1_PATH, FILE_2_PATH, FILE_3_PATH]) {\r\n                let childInput: FileInput = new FileInput();\r\n                childInput.path = path;\r\n\r\n                childInputs.push(childInput);\r\n            }\r\n\r\n            input.files = childInputs;\r\n\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createOutput(): Promise<FileOutput> {\r\n        return new Promise<FileOutput>(resolve => {\r\n            resolve(new FileOutput());\r\n        });\r\n    }\r\n\r\n    protected createContent(): Promise<FileContent> {\r\n        return new Promise<FileContent>((resolve, reject) => {\r\n            fs.readFile(this.input.path, \"utf-8\", (err, data) => {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                let content: FileContent = new FileContent();\r\n                content.lines = data.split(/[\\n\\r]+/);\r\n\r\n                resolve(content);\r\n            });\r\n        });\r\n    }\r\n\r\n    public parseWord(): Promise<this> {\r\n        return this.parseValue(\"word\", () => new Promise<string>(resolve => {\r\n            resolve(this.content.lines[0]);\r\n        }));\r\n    }\r\n\r\n    public parseWords(...indexes: number[]): Promise<this> {\r\n        return this.parseValues(\"words\", (parser, index) => new Promise<string>(resolve => {\r\n            resolve(this.content.lines[1].split(/, /)[index]);\r\n        }), ...indexes);\r\n    }\r\n\r\n    public parseFile(outputParser: (childParser: FileParser) => Promise<any>): Promise<this> {\r\n        return this.parseOutput(\"file\", () => new Promise<FileParser>(resolve => {\r\n            resolve(new FileParser());\r\n        }), outputParser);\r\n    }\r\n\r\n    public parseFiles(outputsParser: (childParser: FileParser, index: number) => Promise<any>,\r\n                      ...indexes: number[]): Promise<this> {\r\n        return this.parseOutputs(\"files\", () => new Promise<FileParser>(resolve => {\r\n            resolve(new FileParser());\r\n        }), outputsParser, ...indexes);\r\n    }\r\n}\r\n\r\nnew FileParser()\r\n    .create(parser => new Promise<FileInput>(resolve => {\r\n        let input: FileInput = new FileInput();\r\n        input.path = FILE_1_PATH;\r\n\r\n        resolve(input);\r\n    }))\r\n    .then(parser => parser.parseWord())\r\n    .then(parser => parser.parseWords(0, 2))\r\n    .then(parser => parser.parseFile(childParser => childParser.parseWord()\r\n        .then(childParser => childParser.parseWords(0, 1, 2))))\r\n    .then(parser => parser.parseFiles(childParser => childParser.parseWord()\r\n        .then(childParser => childParser.parseWords(0, 1, 2)), 0, 2))\r\n    .then(parser => {\r\n        console.log(JSON.stringify(parser.output, null, 2));\r\n    })\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n"]}