{"version":3,"sources":["../src/parser_builder.ts"],"names":[],"mappings":";;AAAA,qCAA8B;AAK9B;IAQI,YAAoB,gBAA8B,MAAM,IAAI,gBAAM,EAAE;QAAhD,kBAAa,GAAb,aAAa,CAAmC;IACpE,CAAC;IAED,gBAAgB,CAAC,YAAuC;QACpD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAEjC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,iBAAiB,CAAC,aAAuC;QACrD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,iBAAiB,CAAC,aAAyC;QACvD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,kBAAkB,CAAC,cAAwC;QACvD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,kBAAkB,CAAC,cAA2C;QAC1D,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,mBAAmB,CAAC,eAAyC;QACzD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,KAAK;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAElC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,EAC/C,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,EACvC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAE/C,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;CACJ;AAxDD,gCAwDC","file":"parser_builder.js","sourcesContent":["import Parser from \"./parser\";\r\nimport Input from \"./input\";\r\nimport Output from \"./output\";\r\nimport Content from \"./content\";\r\n\r\nexport default class ParserBuilder {\r\n    private inputFactory: (parser: Parser) => Input;\r\n    private inputCallback: (parser: Parser) => void;\r\n    private outputFactory: (parser: Parser) => Output;\r\n    private outputCallback: (parser: Parser) => void;\r\n    private contentFactory: (parser: Parser) => Content;\r\n    private contentCallback: (parser: Parser) => void;\r\n\r\n    constructor(private parserFactory: () => Parser = () => new Parser()) {\r\n    }\r\n\r\n    withInputFactory(inputFactory: (parser: Parser) => Input): ParserBuilder {\r\n        this.inputFactory = inputFactory;\r\n\r\n        return this;\r\n    }\r\n\r\n    withInputCallback(inputCallback: (parser: Parser) => void): ParserBuilder {\r\n        this.inputCallback = inputCallback;\r\n\r\n        return this;\r\n    }\r\n\r\n    withOutputFactory(outputFactory: (parser: Parser) => Output): ParserBuilder {\r\n        this.outputFactory = outputFactory;\r\n\r\n        return this;\r\n    }\r\n\r\n    withOutputCallback(outputCallback: (parser: Parser) => void): ParserBuilder {\r\n        this.outputCallback = outputCallback;\r\n\r\n        return this;\r\n    }\r\n\r\n    withContentFactory(contentFactory: (parser: Parser) => Content): ParserBuilder {\r\n        this.contentFactory = contentFactory;\r\n\r\n        return this;\r\n    }\r\n\r\n    withContentCallback(contentCallback: (parser: Parser) => void): ParserBuilder {\r\n        this.contentCallback = contentCallback;\r\n\r\n        return this;\r\n    }\r\n\r\n    build(): Parser {\r\n        let parser = this.parserFactory();\r\n\r\n        parser.create(this.inputFactory, this.inputCallback,\r\n            this.outputFactory, this.outputCallback,\r\n            this.contentFactory, this.contentCallback);\r\n\r\n        return parser;\r\n    }\r\n}\r\n"]}