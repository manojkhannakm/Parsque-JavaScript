{"version":3,"sources":["../src/parser.ts"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["// import * as Promise from \"bluebird\";\r\nimport Input from \"./input\";\r\nimport Output from \"./output\";\r\nimport Content from \"./content\";\r\n\r\nexport default class Parser<I extends Input, O extends Output, C extends Content> {\r\n    public input: I;\r\n    public output: O;\r\n    public content: C;\r\n\r\n    protected createInput(): Promise<I> {\r\n        return new Promise<I>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected inputCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createOutput(): Promise<O> {\r\n        return new Promise<O>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected outputCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createContent(): Promise<C> {\r\n        return new Promise<C>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected contentCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    public create(inputFactory?: (parser: this) => Promise<I>,\r\n                  outputFactory?: (parser: this) => Promise<O>,\r\n                  contentFactory?: (parser: this) => Promise<C>): Promise<this> {\r\n        let promise: Promise<any> = new Promise<any>(resolve => {\r\n            resolve();\r\n        });\r\n\r\n        if (inputFactory) {\r\n            promise = promise.then(() => inputFactory(this));\r\n        } else {\r\n            promise = promise.then(() => this.createInput());\r\n        }\r\n\r\n        promise = promise.then(value => {\r\n            this.input = value;\r\n        }).then(() => this.inputCreated());\r\n\r\n        if (outputFactory) {\r\n            promise = promise.then(() => outputFactory(this));\r\n        } else {\r\n            promise = promise.then(() => this.createOutput());\r\n        }\r\n\r\n        promise = promise.then(value => {\r\n            this.output = value;\r\n        }).then(() => this.outputCreated());\r\n\r\n        if (contentFactory) {\r\n            promise = promise.then(() => contentFactory(this));\r\n        } else {\r\n            promise = promise.then(() => this.createContent());\r\n        }\r\n\r\n        promise = promise.then(value => {\r\n            this.content = value;\r\n        }).then(() => this.contentCreated());\r\n\r\n        return promise.then(() => this);\r\n    }\r\n\r\n    public parseValue<V extends keyof O>(valueName: V,\r\n                                         valueParser: (parser: this) => Promise<O[V]>): Promise<this> {\r\n        return valueParser(this).then(value => {\r\n            this.output[valueName] = value;\r\n        }).then(() => this);\r\n    }\r\n\r\n    public parseValues<V extends keyof O>(valuesName: V,\r\n                                          valuesParser: (parser: this, index: number) => Promise<any>,\r\n                                          ...indexes: number[]): Promise<this> {\r\n        let indexSet: Set<number> = new Set<number>();\r\n\r\n        for (let index of indexes.sort()) {\r\n            if (index >= 0) {\r\n                indexSet.add(index);\r\n            }\r\n        }\r\n\r\n        let newValues: O[V] = [];\r\n\r\n        let values = this.output[valuesName];\r\n\r\n        if (values && Array.isArray(values)) {\r\n            (newValues as any[]).push(values);\r\n        }\r\n\r\n        let promise: Promise<any> = new Promise<any>(resolve => {\r\n            resolve();\r\n        });\r\n\r\n        for (let index of indexSet) {\r\n            promise = promise.then(() => valuesParser(this, index))\r\n                .then(value => {\r\n                    newValues[index] = value;\r\n                });\r\n        }\r\n\r\n        promise = promise.then(() => {\r\n            this.output[valuesName] = newValues;\r\n        });\r\n\r\n        return promise.then(() => this);\r\n    }\r\n}\r\n"]}