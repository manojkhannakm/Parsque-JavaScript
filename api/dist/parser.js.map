{"version":3,"sources":["../src/parser.ts"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["// import * as Promise from \"bluebird\";\r\n\r\nimport Input from \"./input\";\r\nimport Output from \"./output\";\r\nimport Content from \"./content\";\r\n\r\nexport default class Parser {\r\n    public input: Input;\r\n    public output: Output;\r\n    public content: Content;\r\n\r\n    public constructor() {\r\n        this.input = new Input();\r\n        this.output = new Output();\r\n        this.content = new Content();\r\n    }\r\n\r\n    protected createInput(): Promise<Input> {\r\n        return new Promise<Input>(resolve => {\r\n            resolve(new Input());\r\n        });\r\n    }\r\n\r\n    protected inputCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createOutput(): Promise<Output> {\r\n        return new Promise<Output>(resolve => {\r\n            resolve(new Output());\r\n        });\r\n    }\r\n\r\n    protected outputCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    protected createContent(): Promise<Content> {\r\n        return new Promise<Content>(resolve => {\r\n            resolve(new Content());\r\n        });\r\n    }\r\n\r\n    protected contentCreated(): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    public create(inputFactory?: (parser: Parser) => Promise<Input>,\r\n                  outputFactory?: (parser: Parser) => Promise<Output>,\r\n                  contentFactory?: (parser: Parser) => Promise<Content>): Promise<Parser> {\r\n        let promise: Promise<any> = new Promise<any>(resolve => {\r\n            resolve();\r\n        });\r\n\r\n        if (inputFactory) {\r\n            promise = promise.then(() => inputFactory(this));\r\n        } else {\r\n            promise = promise.then(() => this.createInput());\r\n        }\r\n\r\n        promise = promise.then(value => {\r\n            this.input = value;\r\n        }).then(() => this.inputCreated());\r\n\r\n        if (outputFactory) {\r\n            promise = promise.then(() => outputFactory(this));\r\n        } else {\r\n            promise = promise.then(() => this.createOutput());\r\n        }\r\n\r\n        promise = promise.then(value => {\r\n            this.output = value;\r\n        }).then(() => this.outputCreated());\r\n\r\n        if (contentFactory) {\r\n            promise = promise.then(() => contentFactory(this));\r\n        } else {\r\n            promise = promise.then(() => this.createContent());\r\n        }\r\n\r\n        promise = promise.then(value => {\r\n            this.content = value;\r\n        }).then(() => this.contentCreated());\r\n\r\n        return promise.then(() => this);\r\n    }\r\n\r\n    public parseValue(valueName: string,\r\n                      valueParser: (parser: Parser) => Promise<any>): Promise<Parser> {\r\n        return valueParser(this).then(value => {\r\n            this.output[valueName] = value;\r\n        }).then(() => this);\r\n    }\r\n\r\n    // parseValues(valuesName: string,\r\n    //             valuesParser: (parser: Parser, index: number) => Promise<any>,\r\n    //             ...indexes: number[]): Parser {\r\n    //     let indexSet: Set<number> = new Set<number>();\r\n    //\r\n    //     for (let index of indexes.sort()) {\r\n    //         if (index >= 0) {\r\n    //             indexSet.add(index);\r\n    //         }\r\n    //     }\r\n    //\r\n    //     let newValues: any[] = [];\r\n    //\r\n    //     let values = this.output[valuesName];\r\n    //\r\n    //     if (values && Array.isArray(values)) {\r\n    //         newValues.push(values);\r\n    //     }\r\n    //\r\n    //     for (let index of indexSet) {\r\n    //         newValues[index] = valuesParser(this, index);\r\n    //     }\r\n    //\r\n    //     this.output[valuesName] = newValues;\r\n    //\r\n    //     return this;\r\n    // }\r\n}\r\n"]}