{"version":3,"sources":["../src/parser.ts"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import Input from \"./input\";\r\nimport Output from \"./output\";\r\nimport Content from \"./content\";\r\n\r\nexport default class Parser {\r\n    private _input: Input;\r\n    private _output: Output;\r\n    private _content: Content;\r\n\r\n    protected createInput(): Input {\r\n        return new Input();\r\n    }\r\n\r\n    protected inputCreated(): void {\r\n    }\r\n\r\n    protected createOutput(): Output {\r\n        return new Output();\r\n    }\r\n\r\n    protected outputCreated(): void {\r\n    }\r\n\r\n    protected createContent(): Content {\r\n        return new Content();\r\n    }\r\n\r\n    protected contentCreated(): void {\r\n    }\r\n\r\n    create(inputFactory?: (parser: Parser) => Input,\r\n           inputCallback?: (parser: Parser) => void,\r\n           outputFactory?: (parser: Parser) => Output,\r\n           outputCallback?: (parser: Parser) => void,\r\n           contentFactory?: (parser: Parser) => Content,\r\n           contentCallback?: (parser: Parser) => void): Parser {\r\n        if (inputFactory) {\r\n            this._input = inputFactory(this);\r\n        }\r\n\r\n        if (!this._input) {\r\n            this._input = this.createInput();\r\n        }\r\n\r\n        this.inputCreated();\r\n\r\n        if (inputCallback) {\r\n            inputCallback(this);\r\n        }\r\n\r\n        if (outputFactory) {\r\n            this._output = outputFactory(this);\r\n        }\r\n\r\n        if (!this._output) {\r\n            this._output = this.createOutput();\r\n        }\r\n\r\n        this.outputCreated();\r\n\r\n        if (outputCallback) {\r\n            outputCallback(this);\r\n        }\r\n\r\n        if (contentFactory) {\r\n            this._content = contentFactory(this);\r\n        }\r\n\r\n        if (!this._content) {\r\n            this._content = this.createContent();\r\n        }\r\n\r\n        this.contentCreated();\r\n\r\n        if (contentCallback) {\r\n            contentCallback(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    parseValue(valueName: string,\r\n               valueParser: (parser: Parser) => any): Parser {\r\n        this._output[valueName] = valueParser(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    parseValues(valuesName: string,\r\n                valuesParser: (parser: Parser, index: number) => any,\r\n                ...indexes: number[]): Parser {\r\n        let indexSet = new Set<number>();\r\n\r\n        for (let index of indexes.sort()) {\r\n            if (index >= 0) {\r\n                indexSet.add(index);\r\n            }\r\n        }\r\n\r\n        let newValues: any[] = [];\r\n\r\n        let values = this._output[valuesName];\r\n\r\n        if (values && Array.isArray(values)) {\r\n            newValues.push(values);\r\n        }\r\n\r\n        for (let index of indexSet) {\r\n            newValues[index] = valuesParser(this, index);\r\n        }\r\n\r\n        this._output[valuesName] = newValues;\r\n\r\n        return this;\r\n    }\r\n\r\n    parseOutput(outputName: string,\r\n                parserFactory: () => Parser,\r\n                outputParser: (parser: Parser) => void): Parser {\r\n        let parser = parserFactory();\r\n\r\n        parser.create(() => this._input[outputName], undefined,\r\n            () => this._output[outputName], undefined,\r\n            () => this._content[outputName], undefined);\r\n\r\n        outputParser(parser);\r\n\r\n        this._output[outputName] = parser._output;\r\n\r\n        return this;\r\n    }\r\n\r\n    parseOutputs(outputsName: string,\r\n                 parserFactory: () => Parser,\r\n                 outputsParser: (parser: Parser, index: number) => void,\r\n                 ...indexes: number[]): Parser {\r\n        let inputs = this._input[outputsName];\r\n\r\n        let inputSize = 0;\r\n\r\n        if (inputs && Array.isArray(inputs)) {\r\n            inputSize = inputs.length;\r\n        }\r\n\r\n        let indexSet = new Set<number>();\r\n\r\n        for (let index of indexes.sort()) {\r\n            if (index >= 0 && (inputSize == 0 || index < inputSize)) {\r\n                indexSet.add(index);\r\n            }\r\n        }\r\n\r\n        if (indexSet.size == 0) {\r\n            for (let i = 0; i < inputSize; i++) {\r\n                indexSet.add(i);\r\n            }\r\n        }\r\n\r\n        let newOutputs: Output[] = [];\r\n\r\n        let outputs = this._output[outputsName];\r\n\r\n        if (outputs && Array.isArray(outputs)) {\r\n            newOutputs.push(outputs);\r\n        }\r\n\r\n        let contents = this._content[outputsName];\r\n\r\n        for (let index of indexSet) {\r\n            let parser = parserFactory();\r\n\r\n            parser.create(() => {\r\n                if (inputs && Array.isArray(inputs) && index < inputs.length) {\r\n                    return inputs[index];\r\n                }\r\n            }, undefined, () => {\r\n                if (outputs && Array.isArray(outputs) && index < outputs.length) {\r\n                    return outputs[index];\r\n                }\r\n            }, undefined, () => {\r\n                if (contents && Array.isArray(contents) && index < contents.length) {\r\n                    return contents[index];\r\n                }\r\n            }, undefined);\r\n\r\n            outputsParser(parser, index);\r\n\r\n            newOutputs[index] = parser._output;\r\n        }\r\n\r\n        this._output[outputsName] = newOutputs;\r\n\r\n        return this;\r\n    }\r\n\r\n    get input(): Input {\r\n        return this._input;\r\n    }\r\n\r\n    get output(): Output {\r\n        return this._output;\r\n    }\r\n\r\n    get content(): Content {\r\n        return this._content;\r\n    }\r\n}\r\n"]}